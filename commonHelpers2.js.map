{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["import flatpickr from \"flatpickr\";\nimport \"flatpickr/dist/flatpickr.min.css\";\nimport iziToast from \"izitoast\";\nimport \"izitoast/dist/css/iziToast.min.css\";\n\nconst startButton = document.querySelector('button[data-start]');\nconst dateTimePicker = document.getElementById('datetime-picker');\nconst daysSpan = document.querySelector('span[data-days]');\nconst hoursSpan = document.querySelector('span[data-hours]');\nconst minutesSpan = document.querySelector('span[data-minutes]');\nconst secondsSpan = document.querySelector('span[data-seconds]');\n\nlet countdownInterval = null;\nlet selectedDate = null;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    selectedDate = selectedDates[0];\n    if (selectedDate <= new Date()) {\n      iziToast.error({\n        title: \"Error\",\n        message: \"Please choose a date in the future\",\n        position:\"topCenter\",\n      })\n      startButton.disabled = true;\n    } else {\n      startButton.disabled = false;\n    }\n  },\n};\n\nflatpickr(dateTimePicker, options);\n\nstartButton.addEventListener('click', () => {\n  if (countdownInterval) return;\n\n  startButton.disabled = true;\n  dateTimePicker.disabled = true;\n\n  countdownInterval = setInterval(() => {\n    const now = new Date();\n    const timeRemaining = selectedDate - now;\n\n    if (timeRemaining <= 0) {\n      clearInterval(countdownInterval);\n      countdownInterval = null;\n      return;\n    }\n\n    const time = convertMs(timeRemaining);\n    updateTimerDisplay(time);\n  }, 1000);\n});\n\nfunction convertMs(ms) {\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  const days = Math.floor(ms / day);\n  const hours = Math.floor((ms % day) / hour);\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction updateTimerDisplay({ days, hours, minutes, seconds }) {\n  daysSpan.textContent = String(days).padStart(2, '0');\n  hoursSpan.textContent = String(hours).padStart(2, '0');\n  minutesSpan.textContent = String(minutes).padStart(2, '0');\n  secondsSpan.textContent = String(seconds).padStart(2, '0');\n}\n"],"names":["startButton","dateTimePicker","daysSpan","hoursSpan","minutesSpan","secondsSpan","countdownInterval","selectedDate","options","selectedDates","iziToast","flatpickr","timeRemaining","time","convertMs","updateTimerDisplay","ms","days","hours","minutes","seconds"],"mappings":"2GAKA,MAAMA,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAiB,SAAS,eAAe,iBAAiB,EAC1DC,EAAW,SAAS,cAAc,iBAAiB,EACnDC,EAAY,SAAS,cAAc,kBAAkB,EACrDC,EAAc,SAAS,cAAc,oBAAoB,EACzDC,EAAc,SAAS,cAAc,oBAAoB,EAE/D,IAAIC,EAAoB,KACpBC,EAAe,KAEnB,MAAMC,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACrBF,EAAeE,EAAc,CAAC,EAC1BF,GAAgB,IAAI,MACtBG,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAS,WACjB,CAAO,EACDV,EAAY,SAAW,IAEvBA,EAAY,SAAW,EAE1B,CACH,EAEAW,EAAUV,EAAgBO,CAAO,EAEjCR,EAAY,iBAAiB,QAAS,IAAM,CACtCM,IAEJN,EAAY,SAAW,GACvBC,EAAe,SAAW,GAE1BK,EAAoB,YAAY,IAAM,CAEpC,MAAMM,EAAgBL,EADV,IAAI,KAGhB,GAAIK,GAAiB,EAAG,CACtB,cAAcN,CAAiB,EAC/BA,EAAoB,KACpB,MACD,CAED,MAAMO,EAAOC,EAAUF,CAAa,EACpCG,EAAmBF,CAAI,CACxB,EAAE,GAAI,EACT,CAAC,EAED,SAASC,EAAUE,EAAI,CAMrB,MAAMC,EAAO,KAAK,MAAMD,EAAK,KAAG,EAC1BE,EAAQ,KAAK,MAAOF,EAAK,MAAO,IAAI,EACpCG,EAAU,KAAK,MAAQH,EAAK,MAAO,KAAQ,GAAM,EACjDI,EAAU,KAAK,MAASJ,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAC,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASL,EAAmB,CAAE,KAAAE,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,EAAI,CAC7DlB,EAAS,YAAc,OAAOe,CAAI,EAAE,SAAS,EAAG,GAAG,EACnDd,EAAU,YAAc,OAAOe,CAAK,EAAE,SAAS,EAAG,GAAG,EACrDd,EAAY,YAAc,OAAOe,CAAO,EAAE,SAAS,EAAG,GAAG,EACzDd,EAAY,YAAc,OAAOe,CAAO,EAAE,SAAS,EAAG,GAAG,CAC3D"}